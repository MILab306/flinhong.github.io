<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="https://www.flinhong.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.flinhong.com/" rel="alternate" type="text/html"/><updated>2016-07-06T21:59:46+08:00</updated><id>https://www.flinhong.com/</id><title>Frank Lin</title><subtitle>This blog is an exploration of my quirky thoughts and random adventures through life. I hope you enjoy reading and perusing my posts, please leave me a comment... I&#39;d love to hear from you!</subtitle><author><name>Frank Lin</name></author><entry><title>Free SSL with Let’s Encrypt on GitLab Pages</title><link href="https://www.flinhong.com/front-end/lets-encrypt-with-gitlab-pages/" rel="alternate" type="text/html" title="Free SSL with Let&#39;s Encrypt on GitLab Pages"/><published>2016-07-06T00:00:00+08:00</published><updated>2016-07-06T00:00:00+08:00</updated><id>https://www.flinhong.com/front-end/lets-encrypt-with-gitlab-pages</id><content type="html" xml:base="https://www.flinhong.com/front-end/lets-encrypt-with-gitlab-pages/">&lt;p&gt;In this post we will talk about HTTPS and how to add it to your GitLab Pages site with &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;. And you can find the original post at &lt;a href=&quot;https://about.gitlab.com/2016/04/11/tutorial-securing-your-gitlab-pages-with-tls-and-letsencrypt/&quot;&gt;Tutorial: Securing your GitLab Pages with TLS and Let’s Encrypt&lt;/a&gt;. Here, I add my own exprience when following its guidance.&lt;/p&gt; &lt;h2 id=&quot;headid-why-tlsssl&quot;&gt;Why TLS/SSL?&lt;/h2&gt; &lt;p&gt;When discussing HTTPS, it’s common to hear people saying that a static website doesn’t need HTTPS, since it doesn’t receive any POST requests, or isn’t handling credit card transactions or any other secure request. But that’s not the whole story.&lt;/p&gt; &lt;p&gt;TLS (&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.0&quot;&gt;formerly SSL&lt;/a&gt;) is a security protocol that can be added to HTTP to increase the security of your website by:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;properly authenticating yourself: the client can trust that you are really you. The TLS handshake that is made at the beginning of the connection ensures the client that no one is trying to impersonate you;&lt;/li&gt; &lt;li&gt;data integrity: this ensures that no one has tampered with the data in a request/response cycle;&lt;/li&gt; &lt;li&gt;encryption: this is the main selling point of TLS, but the other two are just as important. This protects the privacy of the communication between client and server.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The TLS layer can be added to other protocols too, such as FTP (making it &lt;a href=&quot;https://en.wikipedia.org/wiki/FTPS&quot;&gt;FTPS&lt;/a&gt;) or WebSockets (making &lt;code class=&quot;highlighter-rouge&quot;&gt;ws://&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;wss://&lt;/code&gt;).&lt;/p&gt; &lt;h2 id=&quot;headid-https-everywhere&quot;&gt;HTTPS Everywhere&lt;/h2&gt; &lt;p&gt;Nowadays, there is a strong push for using TLS on every website. The ultimate goal is to make the web safer, by adding those three components cited above to every website.&lt;/p&gt; &lt;p&gt;The first big player was the &lt;a href=&quot;https://www.eff.org/https-everywhere&quot;&gt;HTTPS Everywhere&lt;/a&gt; browser extension. Google has also been using HTTPS compliance to better rank websites since &lt;a href=&quot;https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html&quot;&gt;2014&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;headid-tls-certificates&quot;&gt;TLS certificates&lt;/h2&gt; &lt;p&gt;In order to add TLS to HTTP, one would need to get a certificate, and until 2015, one would need to either pay for it or figure out how to do it with one of the available &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot;&gt;Certificate Authorities&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enter &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;, a free, automated, and open Certificate Authority. &lt;a href=&quot;https://letsencrypt.org/2015/12/03/entering-public-beta.html&quot;&gt;Since December 2015&lt;/a&gt; anyone can get a free certificate from this new Certificate Authority from the comfort of their terminal.&lt;/p&gt; &lt;h2 id=&quot;headid-implementation&quot;&gt;Implementation&lt;/h2&gt; &lt;p&gt;So, let’s suppose we’re going to create a static blog with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll 3&lt;/a&gt;. If you are not creating a blog or are not using Jekyll just follow along, it should be straightforward enough to translate the steps for different purposes.&lt;/p&gt; &lt;p&gt;A simple example blog can be created with:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll new cool-blog New jekyll site installed &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ~/cool-blog. &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cool-blog/ &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now you have to create a GitLab project. Here we are going to create a “user page”, which means that it is a project created within a user account (not a group account), and that the name of the project looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURUSERNAME.gitlab.io&lt;/code&gt;. Refer to the &lt;a href=&quot;http://doc.gitlab.com/ee/pages/README.html#getting-started-with-gitlab-pages&quot;&gt;“Getting started” section of the GitLab Pages manual&lt;/a&gt; for more information on that.&lt;/p&gt; &lt;p&gt;If you are using GitHub Pages, its not possible for you to get a SSL for your custom domain at present. So, GitLab might be a good choice if you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;From now on, remember to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURDOMAIN.com&lt;/code&gt; with your custom domain and &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURUSERNAME&lt;/code&gt; with, well, your username. ;)&lt;/p&gt; &lt;p&gt;Create a project named &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURUSERNAME.gitlab.io&lt;/code&gt; so that GitLab will identify the project correctly. After that, upload your code to GitLab:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git remote add origin git@gitlab.com:YOURUSERNAME/YOURUSERNAME.gitlab.io.git &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push -u origin master &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;OK, so far we have a project uploaded to GitLab, but we haven’t configured GitLab Pages yet. To configure it, just create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; file in the root directory of your repository with the following contents:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pages: stage: deploy image: ruby:2.3 script: - gem install jekyll - jekyll build -d public/ artifacts: paths: - public only: - master &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;This file instructs GitLab &lt;code class=&quot;highlighter-rouge&quot;&gt;Runner&lt;/code&gt; to deploy by installing Jekyll and building your website under the &lt;code class=&quot;highlighter-rouge&quot;&gt;public/&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build -d public/&lt;/code&gt;). You can find a &lt;a href=&quot;https://flinhong.github.io/tips/automated-blog-with-gitlab-ci/&quot;&gt;previous post&lt;/a&gt; about the GitLab CI for your Jekyll site.&lt;/p&gt; &lt;p&gt;While you Wait for the build process to complete, you can track the progress in the Builds page of your project. Once it starts, it probably won’t take longer than a few minutes. Once the build is finished, your website will be available at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://YOURUSERNAME.gitlab.io&lt;/code&gt;. Note that GitLab already provides TLS certificates to all subdomains of &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab.io&lt;/code&gt; (but it has some limitations, so please &lt;a href=&quot;http://doc.gitlab.com/ee/pages/README.html#limitations&quot;&gt;refer to the documentation for more&lt;/a&gt;). So if you don’t want to add a custom domain, you’re done.&lt;/p&gt; &lt;h2 id=&quot;headid-configuring-the-tls-certificate-of-your-custom-domain&quot;&gt;Configuring the TLS certificate of your custom domain&lt;/h2&gt; &lt;p&gt;Once you buy a domain name and point that domain to your GitLab Pages website, you need to configure 2 things:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;add the domain to GitLab Pages configuration (&lt;a href=&quot;http://doc.gitlab.com/ee/pages/README.html#add-a-custom-domain-to-your-pages-website&quot;&gt;see documentation&lt;/a&gt;);&lt;/li&gt; &lt;li&gt;add your custom certificate to your website.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Once you add your domain, your website will be available under both &lt;code class=&quot;highlighter-rouge&quot;&gt;http://YOURDOMAIN.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;https://YOURUSERNAME.gitlab.io&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;But if you try to access your custom domain with HTTPS (&lt;code class=&quot;highlighter-rouge&quot;&gt;https://YOURDOMAIN.com&lt;/code&gt; in this case), your browser will show that horrible page, saying that things are going wrong and someone is trying to steal your information. &lt;em&gt;Why is that?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Since GitLab offers TLS certificates to all &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab.io&lt;/code&gt; pages and your custom domain is just a CNAME over that same domain, GitLab serves the &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab.io&lt;/code&gt; certificate, and your browser receives mixed messages: on one side, the browser is trying to access &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURDOMAIN.com&lt;/code&gt;, but on the other side it is getting a TLS certificate for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.gitlab.io&lt;/code&gt;, signaling that something is wrong. That’s the same case for GitHub Pages, you can visit your site with https for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.github.io&lt;/code&gt; but not for your custom domain.&lt;/p&gt; &lt;p&gt;In order to fix it, you need to obtain a certificate for &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURDOMAIN.com&lt;/code&gt; and add it to GitLab Pages. For that we are going to use Let’s Encrypt.&lt;/p&gt; &lt;p&gt;Let’s Encrypt is a new certificate authority that offers both &lt;em&gt;free&lt;/em&gt; and &lt;em&gt;automated&lt;/em&gt; certificates. That’s perfect for us: we don’t have to pay for having HTTPS and you can do everything within the comfort of your terminal.&lt;/p&gt; &lt;p&gt;We begin with downloading the &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-auto&lt;/code&gt; utility. Open a new terminal window and type:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/letsencrypt/letsencrypt &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;letsencrypt &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-auto&lt;/code&gt; offers a lot of functionality. For example, if you have a web server running Apache, you could add &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-auto --apache&lt;/code&gt; inside your webserver and have everything done for you. &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt&lt;/code&gt; targets primarily Unix-like webservers, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-auto&lt;/code&gt; tool won’t work for Windows users. Check &lt;a href=&quot;https://cultiv.nl/blog/lets-encrypt-on-windows/&quot;&gt;this tutorial&lt;/a&gt; to see how to get Let’s Encrypt certificates while running Windows. But I am not recommend you to use Windows for this process, I have tried but failed…&lt;/p&gt; &lt;p&gt;Since we are running on GitLab’s servers instead, we have to do a bit of manual work:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./letsencrypt-auto certonly -a manual -d YOURDOMAIN.com &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# If you want to support another domain, www.YOURDOMAIN.com, for example, you&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# can add it to the domain list after -d like:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# ./letsencrypt-auto certonly -a manual -d YOURDOMAIN.com -d www.YOURDOMAIN.com&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;I only configured the www subdomain for my site. After you accept that your IP will be publicly logged, a message like the following will appear:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Make sure your web server displays the following content at http://YOURDOMAIN.org/.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM before continuing: 5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.ewlbSYgvIxVOqiP1lD2zeDKWBGEZMRfO_4kJyLRP_4U &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# output omitted&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; Press ENTER to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now it is waiting for the server to be correctly configured so it can go on. &lt;strong&gt;Leave this terminal window open&lt;/strong&gt; for now.&lt;/p&gt; &lt;p&gt;So, the goal is to the make our already-published static website return said token when said URL is requested. That’s easy: create a custom page! Just create a file in your blog folder that looks like this:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- layout: null permalink: /.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.html --- 5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.ewlbSYgvIxVOqiP1lD2zeDKWBGEZMRfO_4kJyLRP_4U &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;This tells Jekyll to create a static page, which you can see at &lt;code class=&quot;highlighter-rouge&quot;&gt;cool-blog/_site/.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.html&lt;/code&gt;, with no extra HTML, just the token in plain text. As we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt; attribute in the front matter, you can name this file anyway you want and put it anywhere, too. Note that the behaviour of the &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt; attribute has &lt;a href=&quot;https://jekyllrb.com/docs/upgrading/2-to-3/#permalinks-no-longer-automatically-add-a-trailing-slash&quot;&gt;changed&lt;/a&gt; from Jekyll 2 to Jekyll 3, so make sure you have Jekyll 3.x installed. If you’re not using version 3 of Jekyll or if you’re using a different tool, just create the same file in the exact path, like &lt;code class=&quot;highlighter-rouge&quot;&gt;cool-blog/.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.html&lt;/code&gt; or an equivalent path in your static site generator of choice. Here we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-setup.html&lt;/code&gt; and place it in the root folder of the blog. In order to check that everything is working as expected, start a local server with jekyll serve in a separate terminal window and try to access the URL:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl http://localhost:4000/.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM &lt;span class=&quot;c&quot;&gt;# response:&lt;/span&gt; 5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.ewlbSYgvIxVOqiP1lD2zeDKWBGEZMRfO_4kJyLRP_4U &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Note that I just replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;http://YOURDOMAIN.com&lt;/code&gt; (from the &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-auto&lt;/code&gt; instructions) with &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;. Everything is working fine, so we just need to upload the new file to GitLab:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add letsencrypt-setup.html &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;add letsencypt-setup.html file&quot;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Just because the &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt; attribute, I cannot get the correct response from the url above, and get a &lt;code class=&quot;highlighter-rouge&quot;&gt;404&lt;/code&gt; response. The right response can only curl from the url with &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; ending.&lt;/p&gt; &lt;p&gt;For fixing this problem, you can add the following lines in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; file after Jekyll build the site in the &lt;code class=&quot;highlighter-rouge&quot;&gt;public/&lt;/code&gt; folder:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;public - mkdir -p /.well-known/acme-challenge - &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .well-known - &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;acme-challenge - &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&quot;&lt;/span&gt; 5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM.ewlbSYgvIxVOqiP1lD2zeDKWBGEZMRfO_4kJyLRP_4U &amp;gt; 5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Once the build finishes, test again if everything is working well:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Note that we&#39;re using the actual domain, not localhost anymore&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl http://YOURDOMAIN.com/.well-known/acme-challenge/5TBu788fW0tQ5EOwZMdu1Gv3e9C33gxjV58hVtWTbDM &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now that everything is working as expected, go back to the terminal window that’s waiting for you and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTER&lt;/code&gt;. This instructs the Let’s Encrypt’s servers to go to the URL we just created. If they get the response they were waiting for, we’ve proven that we actually own the domain and now they’ll send you the TLS certificates. After a while it responds:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/YOURDOMAIN.org/fullchain.pem. Your cert will expire on 2016-07-04. To obtain a new version of the certificate &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the future, simply run Let&lt;span class=&quot;s1&quot;&gt;&#39;s Encrypt again. - If you like Let&#39;&lt;/span&gt;s Encrypt, please consider supporting our work by: Donating to ISRG / Let&lt;span class=&quot;s1&quot;&gt;&#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Success! We have correctly acquired a free TLS certificate for our domain!&lt;/p&gt; &lt;p&gt;Note, however, that like any other TLS certificate, it has an expiration date, and in the case of certificates issued by Let’s Encrypt, the certificate will remain valid for &lt;strong&gt;90 days&lt;/strong&gt;. When you finish setting up, just put in your calendar to remember to renew the certificate in time, otherwise it will become invalid, and the browser will reject it.&lt;/p&gt; &lt;p&gt;Now we just need to upload the certificate and the key to GitLab. Go to &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; inside your project, remove the old CNAME and add a new one with the same domain, but now you’ll also upload the TLS certificate. Paste the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/YOURDOMAIN.com/fullchain.pem&lt;/code&gt; (you’ll need sudo to read the file) to the “Certificate (PEM)” field and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/YOURDOMAIN.com/privkey.pem&lt;/code&gt; (also needs sudo) to the “Key (PEM)” field.&lt;/p&gt; &lt;p&gt;You can access your &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; files by using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt; in Ubuntu with &lt;code class=&quot;highlighter-rouge&quot;&gt;Gedit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201607/gitlab-pages-cert-upload-screenshot.png&quot; alt=&quot;GitLab configure&quot; /&gt;&lt;/p&gt; &lt;p&gt;And you’re done! You now have a fully working HTTPS website:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -vX HEAD https://YOURDOMAIN.com/ &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# starting connection&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Server certificate: YOURDOMAIN.com &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Server certificate: Lets Encrypt Authority X3 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Server certificate: DST Root CA X3 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id=&quot;headid-redirecting&quot;&gt;Redirecting&lt;/h2&gt; &lt;p&gt;Everything is working fine, but now we have an extra concern: we have two working versions of our website, both HTTP and HTTPS. We need a way to redirect all of our traffic to the HTTPS version, and tell search engines to do the same.&lt;/p&gt; &lt;h3 id=&quot;headid-search-engines&quot;&gt;Search Engines&lt;/h3&gt; &lt;p&gt;Instructing the search engines is really easy: just tell them that the HTTPS version is the “canonical” version, and they send all the users to it. And how do you do that? By adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; tag to the header of the HTML:&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://YOURDOMAIN.com/specific/page&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Adding this to every header on a blog tells the search engine that the correct version is the HTTPS one, and they’ll comply.&lt;/p&gt; &lt;h3 id=&quot;headid-internal-links&quot;&gt;Internal links&lt;/h3&gt; &lt;p&gt;Remember to use HTTPS for your CSS or JavaScript file URLs, because when the browser accesses a secure website that relies on an insecure resource, it may block that resource.&lt;/p&gt; &lt;p&gt;It is &lt;a href=&quot;http://www.paulirish.com/2010/the-protocol-relative-url/&quot;&gt;considered a good practice&lt;/a&gt; to use the protocol-agnostic path:&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//YOURDOMAIN.com/styles.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//YOURDOMAIN.com/script.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;headid-javascript-based-redirect&quot;&gt;JavaScript-based redirect&lt;/h3&gt; &lt;p&gt;There is, however, a case where the user specifically types in the URL without using HTTPS, and they’ll access the HTTP version of your website.&lt;/p&gt; &lt;p&gt;The correct way of handling that would be to respond with a 301 “Moved permanently” HTTP code, and the browser would remember it for the next request. However, that’s not a possibility we have here, since we’re running on GitLab’s servers.&lt;/p&gt; &lt;p&gt;A small hack you can do is to redirect your users with a bit of JavaScript code:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YOURDOMAIN.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^http:/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;This redirects the user to the HTTPS version, but there are a few problems with it:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;a user could have JavaScript disabled, and would not be affected by that;&lt;/li&gt; &lt;li&gt;an attacker could simply remove that code and behave as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;Man in the Middle&lt;/a&gt;;&lt;/li&gt; &lt;li&gt;the browser won’t remember the redirect instruction, so every time the user types that same URL, the website will have to redirect him/her again.&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;headid-wrap-up&quot;&gt;Wrap up&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;/images/201607/https.png&quot; alt=&quot;https&quot; /&gt;&lt;/p&gt; &lt;p&gt;That’s how easy it is to have a free HTTPS-enabled website. With these tools, I see no reason not to do it.&lt;/p&gt; &lt;p&gt;If you want to check the status of your HTTPS enabled website, &lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;SSL Labs offers a free online service&lt;/a&gt; that “performs a deep analysis of the configuration of any SSL web server on the public Internet”.&lt;/p&gt; &lt;p&gt;I hope it helps you :)&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Front-end"/><category term="Jekyll"/><category term="GitLab"/><summary>In this post we will talk about HTTPS and how to add it to your GitLab Pages site with Let’s Encrypt. And you can find the original post at Tutorial: Securing your GitLab Pages with TLS and Let’s Encrypt. Here, I add my own exprience when following its guidance.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201607/lets-encrypt.png"/></entry><entry><title>Host Jekyll Site on Google Firebase with free SSL</title><link href="https://www.flinhong.com/tips/jekyll-with-firebase/" rel="alternate" type="text/html" title="Host Jekyll Site on Google Firebase with free SSL"/><published>2016-07-02T00:00:00+08:00</published><updated>2016-07-02T00:00:00+08:00</updated><id>https://www.flinhong.com/tips/jekyll-with-firebase</id><content type="html" xml:base="https://www.flinhong.com/tips/jekyll-with-firebase/">&lt;h2 id=&quot;headid-what-is-firebase-hosting&quot;&gt;What is Firebase Hosting?&lt;/h2&gt; &lt;p&gt;Firebase Hosting is a developer focused static web hosting provider that is super fast, secure and reliable. You can quickly and easily deploy your static websites to a global content-delivery network (CDN) with a single command.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;Key features of Firebase Hosting include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;CDN-backed global content delivery&lt;/li&gt; &lt;li&gt;Free Automatic SSL certificate provisioning&lt;/li&gt; &lt;li&gt;Custom (and even naked) domain support&lt;/li&gt; &lt;li&gt;One-command deploys; one-click rollbacks.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;headid-getting-started&quot;&gt;Getting Started&lt;/h2&gt; &lt;h3 id=&quot;headid-create-a-free-google-firebase-account&quot;&gt;Create a Free Google Firebase Account&lt;/h3&gt; &lt;p&gt;Sign in to the &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase Console&lt;/a&gt; and create a new project. You will be prompted to enter a ‘Project name’ and choose a ‘Country/region’.&lt;/p&gt; &lt;h3 id=&quot;headid-install-node-js&quot;&gt;Install Node js&lt;/h3&gt; &lt;p&gt;Firebase CLI work with node js packages (version 0.10.0 or greater), so you have to install node js in your system, so Just visit &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node js website&lt;/a&gt; and get your specific setup file and install it in your system. And don’t forgot to add environment path variable in your system, so you can easily use your favorite command line shell from everywhere.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &lt;h3 id=&quot;headid-install-firebase&quot;&gt;Install Firebase&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;First Time Installation&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Once you have Node.js and npm installed, you can install the Firebase command line tools via npm:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -g firebase-tools &lt;span class=&quot;c&quot;&gt;# or use sudo (with caution) if required by your system permissions&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# sudo npm install -g firebase-tools&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;This installs the globally available &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Updating Previously Installed Firebase Tools&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;If you have a previously installed version of Firebase command line tools, you can easily update them to the latest version:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm update -g firebase-tools &lt;span class=&quot;c&quot;&gt;# or use sudo (with caution) if required by your system permissions&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# sudo npm update -g firebase-tools&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now this will install all necessary firebase packages.&lt;/p&gt; &lt;p&gt;If you see any error like an upgrade to v 4.0 in windows machine then just &lt;strong&gt;ignore it&lt;/strong&gt;. After a few minutes all the packages will be installed in your machine.&lt;/p&gt; &lt;p&gt;Now run this command to login:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase login &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now, your browser will automatically open and it asks to give some permission to Google, so just give it to them.&lt;/p&gt; &lt;p&gt;If you want to deploy your site with continuous integration system such as Travis, you can get your firebase token by:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase login:ci &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Store the output token in a secure but accessible way in your CI system.&lt;/p&gt; &lt;h3 id=&quot;headid-setup-firebase-project&quot;&gt;Setup Firebase Project&lt;/h3&gt; &lt;p&gt;Just like we use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt; to create a new jekyll website, here we do the same thing for Firebase. So choose your favorite location, and go to that directory with cd command.&lt;/p&gt; &lt;p&gt;Now run, this command:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase init &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;So just like Jekyll generate many of folder (layout, post, include, config etc) for us, firebase will also generate four things, like this.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201607/firebase-init.png&quot; alt=&quot;firebase files&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;headid-generate-your-jekyll-site&quot;&gt;Generate Your Jekyll Site&lt;/h3&gt; &lt;p&gt;Now come back to your Jekyll website, you can copy your jekyll files to your firebase project’s root directory and build your site to the &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; folder:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll build -d public &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;headid-check-your-local-site-with-firebase&quot;&gt;Check Your Local Site with Firebase&lt;/h3&gt; &lt;p&gt;We all know, we can easily see our jekyll website locally though &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:4000&lt;/code&gt;, similarly you can check that public folder with firebase command. Just run this command:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase serve &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Now you can see, your site locally though &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:5000&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:5000&lt;/code&gt; from your browser.&lt;/p&gt; &lt;p&gt;It is really good to see how your site will be live before you deploy it. And don’t forgot to use &lt;code class=&quot;highlighter-rouge&quot;&gt;_draft&lt;/code&gt; folder, so jekyll don’t generate it those pages in the public folder.&lt;/p&gt; &lt;h3 id=&quot;headid-deploying-your-site&quot;&gt;Deploying Your Site&lt;/h3&gt; &lt;p&gt;To deploy your site, simply run the following command from your project directory:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase deploy &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;When they successfully deploy it, they will say visit this URL to see your site live. So just visit it, you will see your site is live with their sub domain like https://projectxyz.firebaseapp.com.&lt;/p&gt; &lt;h2 id=&quot;headid-adding-a-custom-domain&quot;&gt;Adding a Custom Domain&lt;/h2&gt; &lt;p&gt;Firebase Hosting will handle provisioning an SSL certificate for your domain and serving your content over a CDN.&lt;/p&gt; &lt;h3 id=&quot;headid-verification-of-domain-ownership&quot;&gt;Verification of Domain Ownership&lt;/h3&gt; &lt;p&gt;Before setting up your custom domain you’ll need to deploy your site to it’s own firebaseapp.com subdomain. This will give you access to the hosting admin panel, where you’ll be able to see a history of deploys and manage custom domains.&lt;/p&gt; &lt;p&gt;On the &lt;strong&gt;Hosting&lt;/strong&gt; tab of the Firebase app you’d like to associate with a custom domain, select the &lt;strong&gt;Connect Custom Domain&lt;/strong&gt; button.&lt;/p&gt; &lt;p&gt;You will need to update the DNS entries for your domain by adding two TXT entries. The entries are available on the Hosting tab once you start the process of adding a custom domain. Depending on your domain name server host, this verification step may be instant or it may take an hour or more.&lt;/p&gt; &lt;h3 id=&quot;headid-provisioning-an-ssl-certificate&quot;&gt;Provisioning an SSL Certificate&lt;/h3&gt; &lt;p&gt;Once domain ownership is verified, it will provision an SSL certficate for your domain and deploy it across Google’s global CDN. By checking its IP address, it might be the Fastly CDN like GitHub Pages.&lt;/p&gt; &lt;h3 id=&quot;headid-activate-your-domain&quot;&gt;Activate Your Domain&lt;/h3&gt; &lt;p&gt;The final step will involve modifying the DNS for your domain to point to Firebase’s service. They already write well description about what to do, so just read it.&lt;/p&gt; &lt;h2 id=&quot;headid-deploy-with-travis-ci&quot;&gt;Deploy with Travis CI&lt;/h2&gt; &lt;p&gt;In Travis, you can also install the Firebase CLI and deploy your site automaticly by pull your GitHub repo. For the deploy step, you can access your firebase project by your Firebase Token that stated above.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;firebase deploy --token &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FIREBASE_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Refs:&lt;/p&gt; &lt;div class=&quot;footnotes&quot;&gt; &lt;ol&gt; &lt;li id=&quot;fn:1&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://desiredpersona.com/google-firebase-hosting-jekyll/&quot;&gt;Host Jekyll on Google Firebase Hosting&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li id=&quot;fn:2&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://www.goyllo.com/jekyll/deploy/google-firebase/&quot;&gt;Host Jekyll Website To Google Firebase For Free&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;</content><author><name>Frank Lin</name></author><category term="Tips"/><category term="Jekyll"/><category term="Google"/><summary>What is Firebase Hosting?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201607/firebase.png"/></entry><entry><title>Install Jekyll on Windows</title><link href="https://www.flinhong.com/tips/install-jekyll-on-windows/" rel="alternate" type="text/html" title="Install Jekyll on Windows"/><published>2016-06-25T00:00:00+08:00</published><updated>2016-06-25T00:00:00+08:00</updated><id>https://www.flinhong.com/tips/install-jekyll-on-windows</id><content type="html" xml:base="https://www.flinhong.com/tips/install-jekyll-on-windows/">&lt;p&gt;In this installation guide we’ll be using Windows 10. These instructions should work for older versions of Windows but they have not but tested.&lt;/p&gt; &lt;h2 id=&quot;headid-install-chocolatey&quot;&gt;Install Chocolatey&lt;/h2&gt; &lt;p&gt;Open Command Prompt which can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;All Apps -&amp;gt; Windows System -&amp;gt; Command Prompt&lt;/code&gt;. Right click on the icon, select “More” then “Run as administrator”.&lt;/p&gt; &lt;p&gt;Next we’ll install &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; which is a package manager for Windows.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy Bypass -Command &lt;span class=&quot;s2&quot;&gt;&quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; SET &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;%PATH%;%ALLUSERSPROFILE%&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;hocolatey&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Close Command Prompt and open it again to make Chocolatey available, remember to run it as administrator.&lt;/p&gt; &lt;h2 id=&quot;headid-install-ruby-by-chocolatey&quot;&gt;Install Ruby by Chocolatey&lt;/h2&gt; &lt;p&gt;Then we’ll install ruby.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;choco install ruby -y &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Close Command Prompt and open it once again to make Ruby available, remember to run it as administrator.&lt;/p&gt; &lt;h2 id=&quot;headid-install-jekyll-using-gem&quot;&gt;Install Jekyll using Gem&lt;/h2&gt; &lt;p&gt;And now we can install Jekyll.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;We can test Jekyll is working by checking the version installed.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll -v &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;You can visit &lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;Run Jekyll on Windows&lt;/a&gt; for more information.&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Tips"/><category term="Jekyll"/><summary>In this installation guide we’ll be using Windows 10. These instructions should work for older versions of Windows but they have not but tested.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/jekyll.jpg"/></entry><entry><title>简单学学 Liquid 在 Jekyll 中的使用</title><link href="https://www.flinhong.com/front-end/liquid-notes/" rel="alternate" type="text/html" title="简单学学 Liquid 在 Jekyll 中的使用"/><published>2016-06-20T00:00:00+08:00</published><updated>2016-06-20T00:00:00+08:00</updated><id>https://www.flinhong.com/front-end/liquid-notes</id><content type="html" xml:base="https://www.flinhong.com/front-end/liquid-notes/">&lt;h2 id=&quot;headid-liquid-&quot;&gt;Liquid 基础&lt;/h2&gt; &lt;p&gt;Liquid 是个简单有效的模板工具，而 Jekyll 处理页面时常使用 Liquid 调用变量或是进行一些循环操作，使得我们的 Jekyll 模板更具逻辑性和易用性。&lt;/p&gt; &lt;p&gt;Liquid 中有两种 tag：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;使用两个花括号调用变量，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;varibale&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;使用花括号和百分号进行逻辑操作，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;headid-section&quot;&gt;变量&lt;/h3&gt; &lt;p&gt;以下是一个简单的页面（本文中的所有例子均来自 &lt;a href=&quot;http://jekyll.tips/&quot;&gt;Jekyll Tips&lt;/a&gt;），通过 Liquid 调取 &lt;code class=&quot;highlighter-rouge&quot;&gt;front matter&lt;/code&gt; 中的变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;heading&lt;/code&gt;：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- heading: I like cupcakes --- &lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.heading }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;同时我们可以在变量后添加 “filter” 条件来改变所调用变量的输出，例如把上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;heading&lt;/code&gt; 大写：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.heading | upcase }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;当然，还能使用多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;，例如截取 &lt;code class=&quot;highlighter-rouge&quot;&gt;heading&lt;/code&gt; 中的字符：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.heading | upcase | truncate: 8 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;headid-section-1&quot;&gt;逻辑操作&lt;/h3&gt; &lt;p&gt;如下例，可以通过条件语句调整输出结果，只有当 &lt;code class=&quot;highlighter-rouge&quot;&gt;show_heading&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 时才显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- heading: I like cupcakes show_heading: true --- ... {% if page.show_heading %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.heading | upcase | truncate: 8 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; {% endif %} ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;下例增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;elsif&lt;/code&gt; 语句进行多个条件的判断，当 &lt;code class=&quot;highlighter-rouge&quot;&gt;show_heading&lt;/code&gt; 不为真时，判断 &lt;code class=&quot;highlighter-rouge&quot;&gt;heading&lt;/code&gt; 中是否包含 “cupcake”：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- heading: I like cupcakes show_heading: false --- ... {% if page.show_heading %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.heading | upcase | truncate: 8 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; {% elsif page.heading contains &quot;cupcake&quot; %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;I want cupcakes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; {% else %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;I don&#39;t want cupcakes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; {% endif %} ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 外，Liquid 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环也很简单：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- heading: I like cupcakes show_heading: false cupcakes: - chocolate - lemon - strawberry --- ... &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; {% for cupcake in page.cupcakes %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ cupcake }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; {% endfor %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;上面，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;front matter&lt;/code&gt; 中定义的 “cupcakes” 循环输出到列表中。另外 &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; 也是支持的：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {% case cupcake.rating %} {% when 1 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/rating/sick.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; {% when 2 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/rating/unhappy.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; {% when 3 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/rating/ok.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; {% when 4 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/rating/happy.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; {% when 5 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/rating/super_happy.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; {% endcase %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id=&quot;headid-liquid--filter&quot;&gt;Liquid 中的 filter&lt;/h2&gt; &lt;p&gt;下表是 Liquid 中常用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;，你也可以访问 &lt;a href=&quot;http://cheat.jekyll.tips/&quot;&gt;Jekyll Cheat Sheet&lt;/a&gt; 查看所有可用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 及样例。&lt;/p&gt; &lt;hr /&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/th&gt; &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cupcake&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chocolate &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;chocolate cupcake&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lemon&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; cake&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;lemon cake&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;i like cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;I like cupcakes&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;BakeryStore&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;bakerystore&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apple pie&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;APPLE PIE&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;muffin&amp;amp;cupcake?&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;cgi_escape&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;muffin%26cupcake%3F&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;&amp;lt;h1&amp;gt;Banana Split&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt;h1&amp;gt;Banana Split&amp;lt;/h1&amp;gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;blueberry muffin.html&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slugify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;blueberry-muffin-html&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;&amp;lt;h1&amp;gt;Greentea cheesecake&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;strip_html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;Greentea cheesecake&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;**Sour dough** bread&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;markdownify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;Sour dough bread&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;I really really like cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;remove_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;really&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;I really like cupcakes&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;I really really like cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;really&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;I like cupcakes&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;I really really like cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;replace_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;really&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;truly&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;I truly really like cupcakes&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;I really really like cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;really&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;truly&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;I truly truly like cupcakes&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Carrot cake&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;11&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Peanut butter cheesecake&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;number_of_words&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Souffle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;S&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Souffle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;o&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Souffle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;l&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Souffle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;uffl&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apple,banana,carrot&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;[“apple”,”banana”,”carrot”]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;The freshest bread in San Francisco&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;truncate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;The freshest…&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Who ate all the cupcakes?&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;truncatewords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt; &lt;td style=&quot;text-align: left&quot;&gt;Who ate all…&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;hr /&gt; &lt;h2 id=&quot;headid-liquid--1&quot;&gt;Liquid 中的循环&lt;/h2&gt; &lt;p&gt;除了基础的 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环，Liquid 还有一些进阶的循环可以使用。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/style-cycle.png&quot; alt=&quot;images with different filter&quot; /&gt;&lt;/p&gt; &lt;p&gt;上面这个网页中，不同图片使用了不同的 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 样式，我们可以结合 Liquid 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;cycle&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环实现：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- layout: page title: Muffins --- &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Our cupcakes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cupcakes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {% for cupcake in site.cupcakes %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cupcake&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ cupcake.image_path }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ cupcake.type }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-webkit-filter: {% cycle &quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sepia&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invert&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ cupcake.type }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ cupcake.description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; {% endfor %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;forloop.index&lt;/code&gt; 还能获得当前循环的次数：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ forloop.index }}. {{ cupcake.type }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/forloop-index.png&quot; alt=&quot;Forloop Index&quot; /&gt;&lt;/p&gt; &lt;p&gt;如果要从 “0” 还是计数，可以改为：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ forloop.index0 }}. {{ cupcake.type }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;另外，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;reversed&lt;/code&gt; 使 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环逆向进行：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... {% for cupcake in site.cupcakes reversed %} ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;要限制 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环的输出个数可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;，而要跳过前 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 个输出可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;：&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... {% for cupcake in site.cupcakes reversed limit: 3 offset: 3 %} ... &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;一个简单的 Jekyll 博客不需要太多复杂的东西，到这里就差不多了。要学习更多关于 Liquid 的内容，请参考 &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid Docs&lt;/a&gt;。&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Front-end"/><category term="Jekyll"/><category term="Liquid"/><summary>Liquid 基础</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/liquid.jpg"/></entry><entry><title>使用 Robocopy 删除 Windows 上路径过长文件（夹）</title><link href="https://www.flinhong.com/tips/delete-folder-with-robocopy/" rel="alternate" type="text/html" title="使用 Robocopy 删除 Windows 上路径过长文件（夹）"/><published>2016-06-19T00:00:00+08:00</published><updated>2016-06-19T00:00:00+08:00</updated><id>https://www.flinhong.com/tips/delete-folder-with-robocopy</id><content type="html" xml:base="https://www.flinhong.com/tips/delete-folder-with-robocopy/">&lt;p&gt;&lt;img src=&quot;/images/201606/delete_file.png&quot; alt=&quot;windows notice&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;文件名对目标文件夹可能过长。您可以缩短文件名并重试，或者尝试路径较短的位置。&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;看到这样的提示，稍显尴尬，已经不是第一次了，所以干脆写个记录以备后患吧。&lt;/p&gt; &lt;p&gt;用到的工具是 &lt;a href=&quot;https://technet.microsoft.com/en-gb/library/cc733145(v=ws.10).aspx&quot;&gt;Robocopy&lt;/a&gt;，它是微软在 &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=17657&quot;&gt;Windows Server 2003 Resource Kit Tools&lt;/a&gt; 中提供的复制工具，新版的 Windows 中应该已经集成该工具了，如果没有可以到上述网址下载。&lt;/p&gt; &lt;p&gt;好吧，看看怎么删除这样的文件路径过长的文件（夹）吧。&lt;/p&gt; &lt;p&gt;假设要删除的文件夹是 &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\folder-to-delete&lt;/code&gt;，那么可以先在 D 盘下新建一个空文件夹 &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\empty-folder&lt;/code&gt;。&lt;/p&gt; &lt;p&gt;然后再命令提示符中输入：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;robocopy /MIR D:\empty-folder D:\folder-to-delete &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这样就把文件夹 &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\folder-to-delete&lt;/code&gt; 复制成与 &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\empty-folder&lt;/code&gt; 一样的空文件夹了，既删除了想要删掉的路径太长的文件。&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Tips"/><category term="Windows"/><summary></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/delete.png"/></entry><entry><title>Git 学习笔记 - 分支</title><link href="https://www.flinhong.com/tools/Git-notes-branch/" rel="alternate" type="text/html" title="Git 学习笔记 - 分支"/><published>2016-06-16T00:00:00+08:00</published><updated>2016-06-16T00:00:00+08:00</updated><id>https://www.flinhong.com/tools/Git-notes-branch</id><content type="html" xml:base="https://www.flinhong.com/tools/Git-notes-branch/">&lt;p&gt;Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。&lt;/p&gt; &lt;h2 id=&quot;headid-section&quot;&gt;分支简介&lt;/h2&gt; &lt;p&gt;首先要理解 Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。&lt;/p&gt; &lt;p&gt;在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。&lt;/p&gt; &lt;p&gt;我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。暂存操作会为每一个文件计算校验和，然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_large_object&quot;&gt;blob&lt;/a&gt; 对象来保存它们），最终将校验和加入到暂存区域等待提交：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add README test.rb LICENSE &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s1&quot;&gt;&#39;The initial commit of my project&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 进行提交操作时，Git 会先计算每一个子目录的校验和，然后在 Git 仓库中这些校验和保存为树对象。 随后，Git 便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。&lt;/p&gt; &lt;p&gt;现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个树对象（记录着目录结构和 blob 对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/commit-and-tree.png&quot; alt=&quot;Git-tree&quot; title=&quot;首次提交对象及其树结构&quot; /&gt;&lt;/p&gt; &lt;p&gt;做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/commits-and-parents.png&quot; alt=&quot;git-tree-parents&quot; title=&quot;提交对象及其父对象&quot; /&gt;&lt;/p&gt; &lt;p&gt;Git 的分支，其实本质上仅仅是指向提交对象的可变指针。Git 的默认分支名字是 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。它会在每次的提交操作中自动向前移动。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/branch-and-history.png&quot; alt=&quot;branch and histroy&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;headid-section-1&quot;&gt;分支创建&lt;/h2&gt; &lt;p&gt;Git 创建分支很简单，它只是为你创建了一个可以移动的新的指针。比如，创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支，你只需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 命令：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch testing &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这会在当前所在的提交对象上创建一个指针。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/two-branches.png&quot; alt=&quot;branches&quot; title=&quot;两个指向相同提交历史的分支&quot; /&gt;&lt;/p&gt; &lt;p&gt;那么，Git 又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 的特殊指针。在 Git 中，它是一个指针，指向当前所在的本地分支（可将 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 想象为当前分支的别名）。在这里，你仍然在 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支上。因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 命令仅仅 &lt;strong&gt;创建&lt;/strong&gt; 一个新分支，并不会自动切换到新分支中去。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/head-to-master.png&quot; alt=&quot;Head to branch&quot; title=&quot;HEAD 指向当前所在的分支&quot; /&gt;&lt;/p&gt; &lt;p&gt;你可以简单地使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 命令查看各个分支当前所指的对象。提供这一功能的参数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;--decorate&lt;/code&gt;。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --decorate f30ab &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD, master, testing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; add feature &lt;span class=&quot;c&quot;&gt;#32 - ability to add new&lt;/span&gt; 34ac2 fixed bug &lt;span class=&quot;c&quot;&gt;#1328 - stack overflow under certain conditions&lt;/span&gt; 98ca9 initial commit of my project &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;正如你所见，当前 “master” 和 “testing” 分支均指向校验和以 &lt;code class=&quot;highlighter-rouge&quot;&gt;f30ab&lt;/code&gt; 开头的提交对象。&lt;/p&gt; &lt;h2 id=&quot;headid-section-2&quot;&gt;分支切换&lt;/h2&gt; &lt;p&gt;要切换到一个已存在的分支，你需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 命令。 我们现在切换到新创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支去：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout testing &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这样 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 就指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支了。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/head-to-testing.png&quot; alt=&quot;head to a branch&quot; title=&quot;切换分支后，HEAD 指向当前所在的分支&quot; /&gt;&lt;/p&gt; &lt;p&gt;那么，这样的实现方式会给我们带来什么好处呢？现在不妨再提交一次：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim test.rb &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&#39;made a change&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/advance-testing.png&quot; alt=&quot;移动head&quot; title=&quot;HEAD 分支随着提交操作自动向前移动&quot; /&gt;&lt;/p&gt; &lt;p&gt;如图所示，你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支向前移动了，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支却没有，它仍然指向运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 时所指的对象。这就有意思了，现在我们切换回 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支看看：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/checkout-master.png&quot; alt=&quot;切换分支&quot; title=&quot;checkout 时，HEAD 随之移动&quot; /&gt;&lt;/p&gt; &lt;p&gt;这条命令做了两件事。一是使 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 指回 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，二是将工作目录恢复成 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所指向的快照内容。也就是说，你现在做修改的话，项目将始于一个较旧的版本。本质上来讲，这就是忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支所做的修改，以便于向另一个方向进行开发。&lt;/p&gt; &lt;div class=&quot;info-message&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;close-info&quot;&gt;&lt;i class=&quot;fa fa-times&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;p&gt;&lt;strong&gt;分支切换会改变你工作目录中的文件&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;在切换分支时，一定要注意你工作目录里的文件会被改变。如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。&lt;/p&gt; &lt;/div&gt; &lt;p&gt;我们再稍微做些修改并提交：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim test.rb &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&#39;made other changes&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;现在，这个项目的提交历史已经产生了分叉。因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回旧的 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支进行了另外一些工作。上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在需要时将它们合并起来。而所有这些工作，你需要的命令只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/advance-master.png&quot; alt=&quot;项目分叉&quot; title=&quot;项目分叉历史&quot; /&gt;&lt;/p&gt; &lt;p&gt;你可以简单地使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 命令查看分叉历史。运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --oneline --decorate --graph --all&lt;/code&gt; ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --decorate --graph --all &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; c2b9e &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD, master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; made other changes | &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 87ab2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;testing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; made a change |/ &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; f30ab add feature &lt;span class=&quot;c&quot;&gt;#32 - ability to add new formats to the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 34ac2 fixed bug &lt;span class=&quot;c&quot;&gt;#1328 - stack overflow under certain conditions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 98ca9 initial commit of my project &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就像是往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？&lt;/p&gt; &lt;h2 id=&quot;headid-section-3&quot;&gt;分支的新建与合并&lt;/h2&gt; &lt;h3 id=&quot;headid-section-4&quot;&gt;新建分支&lt;/h3&gt; &lt;p&gt;首先，我们假设你正在你的项目上工作，并且已经有一些提交。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/basic-branching-1.png&quot; alt=&quot;basic branch&quot; /&gt;&lt;/p&gt; &lt;p&gt;现在，你已经决定要解决追踪系统中的 #53 问题。想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; 参数的 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 命令：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b iss53 Switched to a new branch &lt;span class=&quot;s2&quot;&gt;&quot;iss53&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;它是下面两条命令的简写：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch iss53 &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout iss53 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/basic-branching-2.png&quot; alt=&quot;创建一个分支&quot; /&gt;&lt;/p&gt; &lt;p&gt;你继续在 #53 问题上工作，并且做了一些提交。在此过程中，&lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支在不断的向前推进，因为你已经检出到该分支（也就是说，你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 指针指向了 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支）。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim index.html &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&#39;added a new footer [issue 53]&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/basic-branching-3.png&quot; alt=&quot;前进分支&quot; title=&quot;iss53 分支随着工作的进展向前推进&quot; /&gt;&lt;/p&gt; &lt;p&gt;现在，突然有个紧急问题等待你来解决。有了 Git 的帮助，你不必把这个紧急问题和 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 的修改混在一起，你也不需要花大力气来还原关于 #53 问题的修改。你所要做的仅仅是切换回 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。&lt;/p&gt; &lt;p&gt;但是，在你这么做之前，要留意你的工作目录和暂存区里那些还没有被提交的修改，它可能会和你即将检出的分支产生冲突从而阻止 Git 切换到该分支。最好的方法是，在你切换分支之前，保持好一个干净的状态。现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支了：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master Switched to branch &lt;span class=&quot;s1&quot;&gt;&#39;master&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。请牢记：当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。&lt;/p&gt; &lt;p&gt;接下来，你要修复这个紧急问题。让我们建立一个针对该紧急问题的分支（hotfix branch），在该分支上工作直到问题解决：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b hotfix Switched to a new branch &lt;span class=&quot;s1&quot;&gt;&#39;hotfix&#39;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim index.html &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&#39;fixed the broken email address&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hotfix 1fb7853] fixed the broken email address 1 file changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/basic-branching-4.png&quot; alt=&quot;new branch&quot; title=&quot;基于 master 分支的紧急问题分支 hotfix branch&quot; /&gt;&lt;/p&gt; &lt;p&gt;你可以运行你的测试，确保你的修改是正确的，然后将修改后的版本其合并回你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。你可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 命令来达到上述目的：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge hotfix Updating f42c576..3a0874c Fast-forward index.html | 2 ++ 1 file changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;在合并的时候，你应该注意到了”快进（fast-forward）”这个词。由于当前 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所指向的提交是你当前提交（有关 hotfix 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。换句话说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。&lt;/p&gt; &lt;p&gt;现在，最新的修改已经在 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所指向的提交快照中，你可以着手发布该修复了。&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/basic-branching-5.png&quot; alt=&quot;update master branch&quot; title=&quot;master 分支被快进到 hotfix&quot; /&gt;&lt;/p&gt; &lt;p&gt;关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。然而，你应该先删除 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 分支，因为你已经不再需要它了 —— &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支已经指向了同一个位置。你可以使用带 &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 选项的 &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 命令来删除分支：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch -d hotfix Deleted branch hotfix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3a0874c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;. &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（&lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支）。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout iss53 Switched to branch &lt;span class=&quot;s2&quot;&gt;&quot;iss53&quot;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim index.html &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&#39;finished the new footer [issue 53]&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;iss53 ad82d7a] finished the new footer &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;issue 53] 1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/basic-branching-6.png&quot; alt=&quot;再回到修改分支&quot; title=&quot;切换到 iss53 分支上继续工作&quot; /&gt;&lt;/p&gt; &lt;p&gt;你在 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 分支上所做的工作并没有包含到 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支中。如果你需要拉取 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 所做的修改，你可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge master&lt;/code&gt; 命令将 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支合并入 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支，或者你也可以等到 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支完成其使命，再将其合并回 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。&lt;/p&gt; &lt;h3 id=&quot;headid-section-5&quot;&gt;分支的合并&lt;/h3&gt; &lt;p&gt;假设你已经修正了 #53 问题，并且打算将你的工作合并入 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。为此，你需要合并 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支到 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，这和之前你合并 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 分支所做的工作差不多。你只需要检出到你想合并入的分支，然后运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 命令：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master Switched to branch &lt;span class=&quot;s1&quot;&gt;&#39;master&#39;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge iss53 Merge made by the &lt;span class=&quot;s1&quot;&gt;&#39;recursive&#39;&lt;/span&gt; strategy. index.html | 1 + 1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这和你之前合并 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 分支的时候看起来有一点不一样。在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。因为，&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所在提交并不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支所在提交的直接祖先，Git 不得不做一些额外的工作。出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的工作祖先（C2），做一个简单的三方合并，如下图：&lt;/p&gt; &lt;p class=&quot;hascaption&quot;&gt;&lt;img src=&quot;/images/201606/basic-merging-1.png&quot; alt=&quot;合并&quot; title=&quot;一次典型合并中所用到的三个快照&quot; /&gt;&lt;/p&gt; &lt;p&gt;和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201606/basic-merging-2.png&quot; alt=&quot;合并提交&quot; /&gt;&lt;/p&gt; &lt;p&gt;Git 会自行决定选取哪一个提交作为最优的共同祖先，并以此作为合并的基础。&lt;/p&gt; &lt;p&gt;既然你的修改已经合并进来了，你已经不再需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支了。现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。&lt;/p&gt; &lt;h3 id=&quot;headid-section-6&quot;&gt;遇到冲突时的分支合并&lt;/h3&gt; &lt;p&gt;有时候合并操作不会如此顺利。如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。如果你对 #53 问题的修改和有关 &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge iss53 Auto-merging index.html CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;index.html Automatic merge failed; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result. &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;此时 Git 做了合并，但是没有自动地创建一个新的合并提交。Git 会暂停下来，等待你去解决合并产生的冲突。你可以在合并冲突后的任意时刻使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status On branch master You have unmerged paths. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fix conflicts and run &lt;span class=&quot;s2&quot;&gt;&quot;git commit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Unmerged paths: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to mark resolution&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; both modified: index.html no changes added to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;s2&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt; HEAD:index.html &amp;lt;div &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt; &lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt; &amp;lt;div &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt; please contact us at support@github.com &amp;lt;/div&amp;gt; &lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;iss53:index.html &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这表示 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 所指示的版本（也就是你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所在的位置，因为你在运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; 命令的时候已经检出到了这个分支）在这个区段的上半部分（&lt;code class=&quot;highlighter-rouge&quot;&gt;=======&lt;/code&gt; 的上半部分），而 &lt;code class=&quot;highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支所指示的版本在 &lt;code class=&quot;highlighter-rouge&quot;&gt;=======&lt;/code&gt; 的下半部分。为了解决冲突，你必须选择使用由 &lt;code class=&quot;highlighter-rouge&quot;&gt;=======&lt;/code&gt; 分割的两部分中的一个，或者你也可以自行合并这些内容。例如，你可以通过把这段内容换成下面的样子来解决冲突：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git mergetool This message is displayed because &lt;span class=&quot;s1&quot;&gt;&#39;merge.tool&#39;&lt;/span&gt; is not configured. See &lt;span class=&quot;s1&quot;&gt;&#39;git mergetool --tool-help&#39;&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;&#39;git help config&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more details. &lt;span class=&quot;s1&quot;&gt;&#39;git mergetool&#39;&lt;/span&gt; will now attempt to use one of the following tools: opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge Merging: index.html Normal merge conflict &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;index.html&#39;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;: modified file &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;remote&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;: modified file Hit &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;to start merge resolution tool &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;opendiff&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;如果你想使用除默认合并工具外的其他合并工具，你可以在 “下列工具中（one of the following tools）” 这句后面看到所有支持的合并工具。 然后输入你喜欢的工具名字就可以了。&lt;/p&gt; &lt;p&gt;等你退出合并工具之后，Git 会询问刚才的合并是否成功。如果你回答是，Git 会暂存那些文件以表明冲突已解决：你可以再次运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 来确认所有的合并冲突都已被解决：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status On branch master All conflicts fixed but you are still merging. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git commit&quot;&lt;/span&gt; to conclude merge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Changes to be committed: modified: index.html &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 来完成合并提交。默认情况下提交信息看起来像下面这个样子：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Merge branch &lt;span class=&quot;s1&quot;&gt;&#39;iss53&#39;&lt;/span&gt; Conflicts: index.html &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# It looks like you may be committing a merge.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# If this is not correct, please remove the file&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# .git/MERGE_HEAD&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# and try again.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# with &#39;#&#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# On branch master&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# All conflicts fixed but you are still merging.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Changes to be committed:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# modified: index.html&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;好了，先到这里了，这下终于明白为什么有时候会遇到冲突。之前不懂解决，总是去拷贝一份之前的数据，重新修改，秀逗了……&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Tools"/><category term="Git"/><summary>Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/git-icons.png"/></entry><entry><title>Git 学习笔记 - 撤销操作</title><link href="https://www.flinhong.com/tools/Git-notes-reset/" rel="alternate" type="text/html" title="Git 学习笔记 - 撤销操作"/><published>2016-06-14T00:00:00+08:00</published><updated>2016-06-14T00:00:00+08:00</updated><id>https://www.flinhong.com/tools/Git-notes-reset</id><content type="html" xml:base="https://www.flinhong.com/tools/Git-notes-reset/">&lt;p&gt;今天学习一下 Git 中的撤销操作，尤其需要注意有些撤销操作是不可逆的，这也是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有几个地方之一。&lt;/p&gt; &lt;p&gt;练习操作还是可以继续克隆这个仓库：&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/libgit2/libgit2&lt;/code&gt;&lt;/p&gt; &lt;p&gt;有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt; 选项的提交命令尝试重新提交：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit --amend &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。&lt;/p&gt; &lt;p&gt;例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s1&quot;&gt;&#39;initial commit&#39;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add forgotten_file &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit --amend &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;最终你只会有一个提交，第二次提交将代替第一次提交的结果。&lt;/p&gt; &lt;h2 id=&quot;headid-section&quot;&gt;取消暂存的文件&lt;/h2&gt; &lt;p&gt;如果你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add *&lt;/code&gt; 暂存了它们两个。如何只取消暂存两个中的一个呢？ &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令提示了你：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status On branch master Changes to be committed: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; renamed: README.md -&amp;gt; README modified: CONTRIBUTING.md &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;在 “Changes to be committed” 文字正下方，提示使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD &amp;lt;file&amp;gt;...&lt;/code&gt; 来取消暂存。所以，我们可以这样用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 来取消暂存 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; 文件：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git reset HEAD CONTRIBUTING.md Unstaged changes after reset: M CONTRIBUTING.md &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status On branch master Changes to be committed: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; renamed: README.md -&amp;gt; README Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git checkout -- &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; modified: CONTRIBUTING.md &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这个命令有点儿奇怪，但是起作用了。 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; 文件已经是修改未暂存的状态了。&lt;/p&gt; &lt;h2 id=&quot;headid-section-1&quot;&gt;撤消对文件的修改&lt;/h2&gt; &lt;p&gt;如果你并不想保留对 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; 文件的修改怎么办？ 你该如何方便地撤消修改 —— 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？幸运的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 也告诉了你应该如何做。在上面一个例子中，未暂存区域是这样：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git checkout -- &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; modified: CONTRIBUTING.md &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;它非常清楚地告诉了你如何撤消之前所做的修改。 让我们来按照提示执行：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -- CONTRIBUTING.md &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status On branch master Changes to be committed: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; renamed: README.md -&amp;gt; README &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;可以看到那些修改已经被撤消了。&lt;/p&gt; &lt;div class=&quot;info-message&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;close-info&quot;&gt;&lt;i class=&quot;fa fa-times&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;你需要知道 &quot;git checkout -- [file]&quot; 是一个危险的命令，这很重要。 你对那个文件做的任何修改都会消失 —— 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。&lt;/p&gt; &lt;/div&gt; &lt;p&gt;另外，在 Git 中任何 &lt;strong&gt;已提交的&lt;/strong&gt; 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt; 选项覆盖的提交也可以恢复。 然而，任何你未提交的东西丢失后很可能再也找不到了。&lt;/p&gt; &lt;p&gt;参考： &lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C&quot;&gt;2.4 Git 基础 - 撤消操作&lt;/a&gt;&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Tools"/><category term="Git"/><summary>今天学习一下 Git 中的撤销操作，尤其需要注意有些撤销操作是不可逆的，这也是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有几个地方之一。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/reset-concept.png"/></entry><entry><title>Anna Kendrick - Cups</title><link href="https://www.flinhong.com/media/Anna-Kendrick-Cups/" rel="alternate" type="text/html" title="Anna Kendrick - Cups"/><published>2016-06-12T00:00:00+08:00</published><updated>2016-06-12T00:00:00+08:00</updated><id>https://www.flinhong.com/media/Anna-Kendrick-Cups</id><content type="html" xml:base="https://www.flinhong.com/media/Anna-Kendrick-Cups/">&lt;p&gt;这首歌本是 A. P. Carter 在 20 世纪 30 年代所创作的一首老歌，名叫《若我离开了》(“When I’m Gone”)。后由多人先后反复修改，加入了击杯元素并修改了填词，最后由美国演员 Anna Kendrick 在电影 &lt;em&gt;Pitch Perfect&lt;/em&gt; 中唱红。&lt;/p&gt; &lt;p&gt;歌词很简单，但是击杯游戏很有意思，吸引了大部分眼球。&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;I got my ticket for the long way round&lt;/p&gt; &lt;p&gt;The one with the prettiest of views&lt;/p&gt; &lt;p&gt;It’s got mountains&lt;/p&gt; &lt;p&gt;It’s got rivers&lt;/p&gt; &lt;p&gt;It’s got sights to give you shivers But it sure would be prettier with you&lt;/p&gt; &lt;p&gt;When I’m gone&lt;/p&gt; &lt;p&gt;When I’m gone&lt;/p&gt; &lt;p&gt;You’re gonna miss me when I’m gone&lt;/p&gt; &lt;p&gt;You’re gonna miss me by my walk&lt;/p&gt; &lt;p&gt;You’re gonna miss me by my talk, oh&lt;/p&gt; &lt;p&gt;You’re gonna miss me when I’m gone&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;电影中这段也挺好玩的：&lt;/p&gt; &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/weqDCGg0GYs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Frank Lin</name></author><category term="Media"/><category term="movie"/><category term="music"/><summary>这首歌本是 A. P. Carter 在 20 世纪 30 年代所创作的一首老歌，名叫《若我离开了》(“When I’m Gone”)。后由多人先后反复修改，加入了击杯元素并修改了填词，最后由美国演员 Anna Kendrick 在电影 Pitch Perfect 中唱红。</summary></entry><entry><title>Git 学习笔记 - .gitignore 的使用</title><link href="https://www.flinhong.com/tools/Git-notes-ignore/" rel="alternate" type="text/html" title="Git 学习笔记 - .gitignore 的使用"/><published>2016-06-12T00:00:00+08:00</published><updated>2016-06-12T00:00:00+08:00</updated><id>https://www.flinhong.com/tools/Git-notes-ignore</id><content type="html" xml:base="https://www.flinhong.com/tools/Git-notes-ignore/">&lt;p&gt;项目中经常会生成一些 Git 系统不需要追踪的文件。典型的是在编译生成过程中产生的文件或是编程器生成的临时备份文件。当然，你不追踪这些文件，可以不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 把它们加到索引中。但是这样会很快变成一件烦人的事，你发现项目中到处有未追踪的文件; 这样也使 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt; 变得没有实际用处，同时 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令的输出也会有它们，每次都看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Untracked files ...&lt;/code&gt; 是不是会变得很抓狂。&lt;/p&gt; &lt;p&gt;其实，这个问题解决起来很简单，我们可以创建一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 的特殊文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。之前在学习 &lt;a href=&quot;/tools/Git-notes-basics/#headid-section-7&quot;&gt;Git 基础&lt;/a&gt;的时候就谈过这个问题。&lt;/p&gt; &lt;p&gt;当然，我们不需要从头写 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：&lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;https://github.com/github/gitignore&lt;/a&gt;，另外，推荐一个自动生成 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件的网址：&lt;a href=&quot;https://www.gitignore.io/&quot;&gt;http://www.gitignore.io/&lt;/a&gt;。&lt;/p&gt; &lt;p&gt;要注意，我们忽略文件的原则是&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;忽略操作系统自动生成的文件，比如缩略图等；&lt;/li&gt; &lt;li&gt;忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 .class 文件；&lt;/li&gt; &lt;li&gt;忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;比如说，你在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Desktop.ini&lt;/code&gt; 文件，因此你需要忽略 Windows 自动生成的信息文件：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Windows: Thumbs.db ehthumbs.db Desktop.ini &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;然后，继续忽略 Python 编译产生的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.pyc&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.pyo&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; 等文件或目录：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Python: *.py[cod] *.so *.egg *.egg-info dist build &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;最后一步就是把 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 也提交到 Git，并且可以对其做版本管理。当然检验 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 的标准是 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令是不是说 &lt;code class=&quot;highlighter-rouge&quot;&gt;working directory clean&lt;/code&gt;。&lt;/p&gt; &lt;p&gt;有些时候，你想添加一个文件到 Git，但发现添加不了，原因可能就是这个文件被 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 忽略了：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add App.class The following paths are ignored by one of your .gitignore files: App.class Use -f &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you really want to add them. &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;如果你确实想添加该文件，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 强制添加到 Git：&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add -f App.class &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;或者你发现，可能是 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 写得有问题，需要找出来到底哪个规则写错了，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git check-ignore&lt;/code&gt; 命令检查：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git check-ignore -v App.class .gitignore:3:*.class App.class &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;上面，Git 告诉我们，&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则了。&lt;/p&gt; &lt;p&gt;其他信息可以直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;man gitignore&lt;/code&gt; 查看帮助&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt; &lt;p&gt;但有些时候我们会遇到这样的问题：写入 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件中的文件却还是被 Git 追踪, 当你通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 查询文件状态时，他们并没有被忽略。&lt;/p&gt; &lt;p&gt;以下是你可能遇到问题的场景：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;当你在 git 库中编写某些代码文件，并已经 stage 该文件之后，你发现某个文件你不想用了，想在以后的改变中忽略它。然后在你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件中加入该文件名，结果它并没有被忽略。&lt;/li&gt; &lt;li&gt;当你从远程代码库中 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 一份代码到本地并做些修改，build，然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 等 stage 了这些改变，当你通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 查看状态时发现不小心把 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; 文件夹给 add 进来了。于是你在 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件中加入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt;，但发现并不起作用。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;究其原因，&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件只是 ignore 没有被 staged(cached) 文件，对于已经被 staged 的文件，加入 ignore 文件时一定要先从 staged 移除。下面这段话来自 GitHub：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;If you already have a file checked in, and you want to ignore it, Git will not ignore the file if you add a rule later. In those cases, you must untrack the file first, by running the following command in your terminal:&lt;/p&gt; &lt;/blockquote&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm --cached &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;因此，要想用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 成功忽略文件，必须先把它们从 staged 中移除&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;commit 你已有的改变，保存当前的工作。&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm --cached file/path/to/be/ignored&lt;/code&gt; 清除缓存。&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 添加更改变化。&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;fixed untracked files&quot;&lt;/code&gt;。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;参考：&lt;/p&gt; &lt;div class=&quot;footnotes&quot;&gt; &lt;ol&gt; &lt;li id=&quot;fn:1&quot;&gt; &lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000&quot;&gt;忽略特殊文件&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li id=&quot;fn:2&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000522997&quot;&gt;.gitignore 文件使用说明&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li id=&quot;fn:3&quot;&gt; &lt;p&gt;&lt;a href=&quot;http://t.hengwei.me/post/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/&quot;&gt;.gitignore 文件不起作用&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;</content><author><name>Frank Lin</name></author><category term="Tools"/><category term="Git"/><summary>项目中经常会生成一些 Git 系统不需要追踪的文件。典型的是在编译生成过程中产生的文件或是编程器生成的临时备份文件。当然，你不追踪这些文件，可以不用 git add 把它们加到索引中。但是这样会很快变成一件烦人的事，你发现项目中到处有未追踪的文件; 这样也使 git add . 和 git commit -a 变得没有实际用处，同时 git status 命令的输出也会有它们，每次都看到 Untracked files ... 是不是会变得很抓狂。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201606/ignore.jpg"/></entry><entry><title>使用 GitLab CI 自动部署博客到 GitHub Pages</title><link href="https://www.flinhong.com/tips/automated-blog-with-gitlab-ci/" rel="alternate" type="text/html" title="使用 GitLab CI 自动部署博客到 GitHub Pages"/><published>2016-05-22T00:00:00+08:00</published><updated>2016-05-22T00:00:00+08:00</updated><id>https://www.flinhong.com/tips/automated-blog-with-gitlab-ci</id><content type="html" xml:base="https://www.flinhong.com/tips/automated-blog-with-gitlab-ci/">&lt;p&gt;由于一些莫名其妙的原因，我用 GitHub Pages 的 Jekyll 版本不能在本地生成 _posts 的静态文件，自然放到 GitHub 上也不行。一直没弄清楚原因，😳 求知情人士解答。于是找了备用方案，用起了 &lt;a href=&quot;http://docs.gitlab.com/ee/pages/README.html&quot;&gt;GitLab Pages&lt;/a&gt;，但是访问速度上又没有 GitHub Pages 给力，又不想用其他 CDN，所以还是两头托管，还能让百度索引。&lt;/p&gt; &lt;p&gt;其实 GitLab Pages 是基于 GitLab CI，我们最终看到的网站是借由所配置的 &lt;a href=&quot;http://doc.gitlab.com/ee/ci/quick_start/README.html#configuring-a-runner&quot;&gt;Runner&lt;/a&gt; 生成的，所以可以用各种 Jekyll 插件，还能自定所使用的 Jekyll 版本。搭建起来和 GitHub Pages 差不多，可以参看官方博客 &lt;a href=&quot;https://about.gitlab.com/2016/04/07/gitlab-pages-setup/&quot;&gt;Hosting on GitLab.com with GitLab Pages&lt;/a&gt; 设置就行。&lt;/p&gt; &lt;p&gt;为了省事，还可以进一步配置 GitLab Pages 所用到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 文件，让 GitLab 中生成的静态文件自动部署到 GitHub 上，再也不用两个仓库倒腾了。&lt;/p&gt; &lt;p&gt;首先，需要在 GitHub 中生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Personal access tokens&lt;/code&gt;，注意生成后自己拷贝下来，因为你以后在 GitHub 上不会再见到这个 token 了。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/201605/github-settings.png&quot; alt=&quot;GitHub access token&quot; /&gt;&lt;/p&gt; &lt;p&gt;然后就是配置 GitLab 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 文件，比如说我的：&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# requiring the environment of Ruby 2.x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby:2.2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# add bundle cache to &#39;vendor&#39; for speeding up builds&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install --path vendor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git clone https://&amp;lt;your_github_token&amp;gt;@github.com/&amp;lt;your_github_repo.git&amp;gt; public&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build -d public/&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd ./public&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config user.name &quot;Frank Lin&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config user.email &quot;franklin@flinhong.com&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config --global push.default simple&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git add .&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git commit -m &quot;Update site&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git push --set-upstream &quot;&amp;lt;your_github_token&amp;gt;@github.com/&amp;lt;your_github_repo.git&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;把上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your_github_token&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your_github_repo.git&amp;gt;&lt;/code&gt; 换成你自己的就好了（不用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;）。GitLab Pages 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 文件夹展示生成的内容，所以要在 GitLab 上托管博客，就不要改这个文件夹了。&lt;/p&gt; &lt;p&gt;然后就可以继续开开心心的弄博客啦，只需要把 Jekyll 文件推送到 GitLab 上，就能看到 GitHub 用生成的静态文件给你展示博客内容啦。当然，也可以用同样的方法推送到 Coding.net 上，我就这么做了，这下一次 push，几处都有了，也不用那么麻烦设置我现在还没懂的 Webhooks 了。&lt;/p&gt; &lt;p&gt;当然，GitLab 提供免费的私人仓库，所以你不想共享博客源文件也可以用这种方法。PS，GitLab Pages 支持自定义域名使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; ，👍。&lt;/p&gt;</content><author><name>Frank Lin</name></author><category term="Tips"/><category term="GitLab"/><category term="Jekyll"/><summary>由于一些莫名其妙的原因，我用 GitHub Pages 的 Jekyll 版本不能在本地生成 _posts 的静态文件，自然放到 GitHub 上也不行。一直没弄清楚原因，😳 求知情人士解答。于是找了备用方案，用起了 GitLab Pages，但是访问速度上又没有 GitHub Pages 给力，又不想用其他 CDN，所以还是两头托管，还能让百度索引。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.flinhong.com/images/201605/gitlab.png"/></entry></feed>